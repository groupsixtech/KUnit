PROGRAM kunit
%NOLOCKGROUP
%UNINITVARS

%INCLUDE kunit.klt

%INCLUDE kunit.private.klh
%INCLUDE kunit.klh
%INCLUDE strings.klh

BEGIN
  kunit_init

  IF filenames='' THEN
    WRITE response ('Please provide a list of test filenames via the GET parameter.', CR)
    kunit_clean
    ABORT
  ENDIF

  split_str(filenames, ',', filenames_a)
  FOR i=1 TO 16 DO
    IF NOT(UNINIT(filenames_a[i])) THEN
      IF filenames_a[i]<>'' THEN
        -- todo: validate filename
        kunit_spawn(filenames_a[i])
      ENDIF
    ENDIF
  ENDFOR

  WHILE task_count>0 DO
    PEND_SEMA(KUNIT_SEMA, MAX_WAIT, timeout)
    task_count = task_count - 1
    IF timeout THEN
      WRITE response ('Timed out waiting for a task', CR)
    ENDIF
  ENDWHILE

  kunit_output
  kunit_clean
END kunit

-- Private: Initialize KUNIT
ROUTINE kunit_init
  BEGIN
    GET_VAR(entry, '*system*', '$fast_clock', start_time, status)

    IF UNINIT(output) THEN output = ''; ENDIF
    IF UNINIT(filenames) THEN filenames = ''; ENDIF

    CLR_IO_STAT(response)
    IF IO_STATUS(response) <> 0 THEN CLOSE FILE response; ENDIF

    OPEN FILE response ('RW', 'RD:RESPONSE.HTM')
    -- empty fail_f
    CLR_IO_STAT(fail_f)
    IF IO_STATUS(fail_f) <> 0 THEN CLOSE FILE fail_f; ENDIF

    OPEN FILE fail_f ('RW', FAIL_FILE)
    CLOSE FILE fail_f
    -- empty prog_pipe
    CLR_IO_STAT(prog_f)
    IF IO_STATUS(prog_f) <> 0 THEN CLOSE FILE prog_f; ENDIF

    OPEN FILE prog_f ('RW', PROG_PIPE)
    CLOSE file prog_f

    IF output = 'html' THEN
      WRITE response (
        '<!DOCTYPE html>',
        '<html><head>',
        '<title>KUnit v',VERSION,'</title>',
        '<style>body { padding: 20px; }</style>',
        '<meta charset="UTF-8" />',
        '</head><body>',
        '<pre>', CR)
    ENDIF

    WRITE response ('KUnit v', VERSION, CR, CR)

    test_count    = 0
    fail_count    = 0
    pass_count    = 0
    assrtn_count  = 0
    task_count    = 0

    CLEAR_SEMA(KUNIT_SEMA)
  END kunit_init

-- Private: Fail a test
ROUTINE kunit_fail
  BEGIN
    fail_count = fail_count + 1

    IF UNINIT(error_msg) THEN error_msg = ''; ENDIF
    OPEN FILE fail_f ('AP', FAIL_FILE)
    WRITE fail_f (fail_count, ') Failure:', CR)
    WRITE fail_f (name, CR)
    WRITE fail_f (error_msg,CR,CR)
    CLOSE FILE fail_f
  END kunit_fail

-- Private: pass a test
ROUTINE kunit_pass
  BEGIN
    pass_count = pass_count + 1
  END kunit_pass

-- Public: Perform a test
--
-- name   - A STRING describing what this test is testing
-- result - A BOOLEAN that determines if the test passes or fails
--
-- Examples
--
--   kunit_test('true should pass', true)
--   # => test passes
--
--   kunit_test('this test should fail', false)
--   # => test fails
ROUTINE kunit_test
  BEGIN
    test_count = test_count + 1

    OPEN FILE prog_f ('AP', PROG_PIPE)
    IF result THEN
      WRITE prog_f ('.')
      kunit_pass
    ELSE
      WRITE prog_f ('F')
      kunit_fail(name)
    ENDIF

    IF ((pass_count+fail_count) MOD LINE_WRAP = 0) THEN
      WRITE prog_f (CR)
    ENDIF
    CLOSE FILE prog_f
  END kunit_test

-- Public: tell the test runner that this file is finished
ROUTINE kunit_done
  BEGIN
    POST_SEMA(KUNIT_SEMA)
  END kunit_done

-- Public: Assert that something is true
--
-- actual - A BOOLEAN value
--
-- Examples
--
--   kunit_assert(true)
--   # => true
--
--   kunit_assert(false)
--   # => false
ROUTINE kunit_assert
  BEGIN
    assrtn_count = assrtn_count + 1

    IF actual THEN
      RETURN(true)
    ELSE
      error_msg = 'Expected true but got false'
      RETURN(false)
    ENDIF
  END kunit_assert

-- Public: Assert that two INTEGERs are equal
--
-- expected - The expected INTEGER value
-- actual   - The actual INTEGER value
--
-- Examples
--
--   kunit_eq_int(1,1)
--   # => true
--
--   kunit_eq_int(1,2)
--   # => False
ROUTINE kunit_eq_int
  BEGIN
    assrtn_count = assrtn_count + 1

	IF UNINIT(actual) THEN
	  error_msg = 'Expected ' + i_to_s(expected) + ' but got UNINIT'
	  RETURN(false)
	ENDIF
    IF expected=actual THEN
      RETURN(true)
    ELSE
      error_msg = 'Expected ' + i_to_s(expected) + ' but got ' + i_to_s(actual)
      RETURN(false)
    ENDIF
  END kunit_eq_int

ROUTINE kunit_un_int
BEGIN
	assrtn_count = assrtn_count + 1
	IF UNINIT(actual) THEN
		RETURN(true)
	ELSE
		error_msg = 'Expected UNINIT but got ' + i_to_s(actual)
		RETURN(false)
	ENDIF
END kunit_un_int

ROUTINE kunit_un_str
BEGIN
	assrtn_count = assrtn_count + 1
	IF UNINIT(actual) THEN
		RETURN(true)
	ELSE
		error_msg = 'Expected UNINIT but got "' + actual + '"'
		RETURN(false)
	ENDIF
END kunit_un_str

ROUTINE kunit_un_r
BEGIN
	assrtn_count = assrtn_count + 1
	IF UNINIT(actual) THEN
		RETURN(true)
	ELSE
		error_msg = 'Expected UNINIT but got ' + r_to_s(actual)
		RETURN(false)
	ENDIF
END kunit_un_r


ROUTINE kunit_eq_r
  BEGIN
    assrtn_count = assrtn_count + 1

    IF expected=actual THEN
      RETURN(true)
    ELSE
      --convert to string and check as truncated decimal 
      --(ie. 0.75 != 0.750) will cause false condition
      IF r_to_s(expected) = r_to_s(actual) THEN
        RETURN(true)
      ELSE
        error_msg = 'Expected ' + r_to_s(expected) + ' but got ' + r_to_s(actual) 
        RETURN(false)
      ENDIF

    ENDIF
  END kunit_eq_r

-- Public: Assert that two arrays are equal
--
-- expected - The expected array
-- actual   - The actual array
--
-- Examples
--
-- arr1 : ARRAY[5] OF REAL
-- arr2 : ARRAY[5] OF REAL
-- arr3 : ARRAY[5] OF REAL
--   kunit_eq_int(arr1, arr2)
--   # => true
--
--   kunit_eq_int(arr1, arr3)
--   # => False

ROUTINE kunit_eq_arr
  VAR
    i : INTEGER
    ok : BOOLEAN
  BEGIN
    ok = TRUE

    assrtn_count = assrtn_count + 1

    -- check array sizes. If expected has more values
    -- than the actual array throw an error
    IF ARRAY_LEN(expected) > ARRAY_LEN(actual) THEN
      error_msg = 'Comparison array is not the same size.' &
                  + 'as test array.'
      RETURN(false)
    ENDIF

    --actual test array should be equal to or greater than expected
    -- loop through arrays and check values
    FOR i = 1 TO ARRAY_LEN(actual) DO
      -- disregard comparision if item is outside of expected
      -- shape
      IF (i <= ARRAY_LEN(expected)) THEN
        -- handle uninitialized
        IF UNINIT(actual[i]) THEN
          error_msg = 'Expected ' + r_to_s(expected[i]) + ' but got UNINIT'
          RETURN(false)
        ENDIF

        -- need to convert to string and evaluate to handle truncated
        -- decimal i.e. 0.75 != 0.750
        IF r_to_s(expected[i]) <> r_to_s(actual[i]) THEN
          ok = FALSE
          GO TO skiploop
        ENDIF

      ENDIF
    ENDFOR

    skiploop::

    IF ok THEN
      RETURN(true)
    ELSE
      error_msg = 'Expected ' + r_to_s(expected[i]) + ' but got ' + r_to_s(actual[i]) + &
                  ', on index ' + i_to_s(i) + ' of array.'
      RETURN(false)
    ENDIF
  END kunit_eq_arr

ROUTINE kunit_eq_2d
  VAR
    i,j : INTEGER
    b : BOOLEAN
  BEGIN
    IF ARRAY_LEN(expected) > ARRAY_LEN(actual) THEN
      error_msg = 'rows are not the same size'
      RETURN(false)
    ENDIF

    IF ARRAY_LEN(e_rows) > ARRAY_LEN(a_rows) THEN
      error_msg = 'row placeholders need to be the same size'
      RETURN(false)
    ENDIF

    FOR i=1 TO ARRAY_LEN(actual) DO
      FOR j=1 TO ARRAY_LEN(a_rows) DO
        e_rows[j] = expected[i,j]
        a_rows[j] = actual[i,j]
      ENDFOR

      b = kunit_eq_arr(e_rows, a_rows)
      IF b = FALSE THEN
        error_msg = 'Row ' + i_to_s(i) + 'is not equal.'
        RETURN(false)
      ENDIF
    ENDFOR

    RETURN(true)
  END kunit_eq_2d

  ROUTINE kunit_eq_arb
  VAR
    i : INTEGER
    ok : BOOLEAN
  BEGIN
    ok = TRUE
    FOR i = 1 TO ARRAY_LEN(actual) DO
      IF ok THEN
        ok = kunit_assert(actual[i])
      ENDIF
    ENDFOR

    RETURN(ok)
    
  END kunit_eq_arb


-- Public: Assert that two STRINGs are equal
--
-- expected - The expected STRING value
-- actual   - The actual STRING value
--
-- Examples
--
--   kunit_eq_str('foo','foo')
--   # => true
--
--   kunit_eq_str('foo','bar')
--   # => false
ROUTINE kunit_eq_str
  VAR
    i,j : INTEGER
  BEGIN
    assrtn_count = assrtn_count + 1

    IF UNINIT(expected) THEN
      error_msg = 'Expected was UNINIT'
      RETURN(false)
    ENDIF

    IF UNINIT(actual) THEN
      error_msg = 'Actual was UNINIT'
      RETURN(false)
    ENDIF

    error_msg = ''
    --handle if actual is the same as expected but has
    --characters at the end cut off.
    IF STR_LEN(expected) > STR_LEN(actual) THEN
      error_msg = 'Exp: "'+expected+'" is larger than Act: "'+actual+ '"' + chr(13)
      --error_msg = error_msg + ' Exp: '+i_to_s(STR_LEN(expected))+' characters vs Act: '+i_to_s(STR_LEN(actual))+ ' characters' + chr(13)
    ENDIF

    FOR i=1 TO STR_LEN(actual) DO
      IF i > STR_LEN(expected) THEN
        error_msg = 'Act: "'+actual+'" is larger than Exp: "'+expected+ '"' + chr(13)
        --error_msg = error_msg + ' Act: '+i_to_s(STR_LEN(actual))+' characters vs Exp: '+i_to_s(STR_LEN(expected))+ ' characters' + chr(13)
        RETURN(false)
      ENDIF
      --compare character by character
      IF (SUB_STR(actual,i,1) <> SUB_STR(expected,i,1)) THEN
        error_msg = error_msg + ' Strings dont match at char: ' + i_to_s(i) + chr(13) + &
                    'actual: ' +  SUB_STR(actual,i,1) + chr(13) + &
                    'expected: ' +  SUB_STR(expected,i,1) + chr(13) ;
        RETURN(false)
      ENDIF
    ENDFOR

    IF STR_LEN(expected) > STR_LEN(actual) THEN
      RETURN(false)
    ENDIF

    RETURN(TRUE)
  END kunit_eq_str

-- Public: Assert that two XYZWPR positions are equal
--
-- expected - The expected XYZWPR value
-- actual   - The actual XYZWPR value
--
-- Returns true if the X, Y, Z, W, P and R compontents are equal,
-- false otherwise
ROUTINE kunit_eq_pos
  BEGIN
    assrtn_count = assrtn_count + 1

    IF UNINIT(expected) OR UNINIT(actual) THEN
      error_msg = 'Expected and/or actual are UNINIT'
      RETURN(false)
    ENDIF

    IF (expected >=< actual) THEN
      RETURN(true)
    ELSE
      error_msg = 'Expected: ' + chr(13) &
        + p_to_s(expected) + chr(13) &
        + 'Actual: ' + chr(13) &
        + p_to_s(actual)
      RETURN(false)
    ENDIF
  END kunit_eq_pos

ROUTINE kunit_eq_vec
  BEGIN
    assrtn_count = assrtn_count + 1
    IF UNINIT(expected) OR UNINIT(actual) THEN
      error_msg = 'Expected and/or actual are UNINIT'
      RETURN(false)
    ENDIF

    IF vec_to_s(expected, ',') = vec_to_s(actual, ',') THEN
      RETURN(TRUE)
    ELSE
      error_msg = 'Expected ' + vec_to_s(expected, ',') + & 
                  ' but got ' + vec_to_s(actual, ',')
      RETURN(false)
    ENDIF

  END kunit_eq_vec


ROUTINE kunit_eq_vrl
  VAR
    ok : BOOLEAN
  BEGIN
    assrtn_count = assrtn_count + 1
    IF UNINIT(expected) OR UNINIT(actual) THEN
      error_msg = 'Expected and/or actual are UNINIT'
      RETURN(false)
    ENDIF

    --evaluate relationally to error EPSILON
    ok = TRUE
    IF ABS(expected.x-actual.x) > epsilon THEN ok = FALSE; ENDIF
    IF ABS(expected.y-actual.y) > epsilon THEN ok = FALSE; ENDIF
    IF ABS(expected.z-actual.z) > epsilon THEN ok = FALSE; ENDIF

    IF ok THEN
      RETURN(TRUE)
    ELSE
      error_msg = 'Expected ' + vec_to_s(expected, ',') + & 
                  ' but got ' + vec_to_s(actual, ',')
      RETURN(false)
    ENDIF

  END kunit_eq_vrl

ROUTINE kunit_eq_cfg
  VAR
    cfg_data : CONFIG
    ac_config : STRING[25]
  BEGIN
    assrtn_count = assrtn_count + 1

    IF UNINIT(expected) THEN
      error_msg = 'Expected was UNINIT'
      RETURN(false)
    ENDIF

    IF UNINIT(actual) THEN
      error_msg = 'Actual was UNINIT'
      RETURN(false)
    ENDIF

    -- check that expected string is a CONFIG data type
    CNV_STR_CONF(expected, cfg_data, status)
    IF status<>0 THEN
        error_msg = 'Expected is not a Configuration string'
        RETURN(false)
    ENDIF

    --convert actual config to a string
    CNV_CONF_STR(actual.config_data, ac_config)

    -- compare the two strings
    IF ac_config=expected THEN
      RETURN(true)
    ELSE
      error_msg = 'Expected "' + expected + '" but got "' + ac_config + '"' 
      RETURN(false)
    ENDIF


  END kunit_eq_cfg

-- Public: Assert that two JOINTPOS positions are equal
--
-- expected - The expected JOINTPOS value
-- actual   - The actual JOINTPOS value
--
-- Returns true if poses are equal,
-- false otherwise

ROUTINE kunit_eq_jnt
  VAR
    s_expected : STRING[50]
    s_actual : STRING[50]
  BEGIN

    assrtn_count = assrtn_count + 1

    -- convert jointpos to a string
    s_expected = joint_to_s(expected, ',')
    s_actual = joint_to_s(actual, ',')

    IF UNINIT(s_expected) THEN
      error_msg = 'Expected was UNINIT'
      RETURN(false)
    ENDIF

    IF UNINIT(s_actual) THEN
      error_msg = 'Actual was UNINIT'
      RETURN(false)
    ENDIF

    IF s_expected=s_actual THEN
      RETURN(true)
    ELSE
      error_msg = 'Expected: ' + chr(13) &
        + 'jpos: ' + s_expected + chr(13) &
        + 'Actual: ' + chr(13) &
        + 'jpos: ' + s_actual
      RETURN(false)
    ENDIF

  END kunit_eq_jnt

-- Public: Opens the KUNIT pipe for reading and writing
--
-- This is used in conjunction with `k_close_pipe` and `kunit_pipe` to
-- test long strings are equal.
ROUTINE k_init_pipe
  BEGIN
    OPEN FILE pipe_f ('RW', PIPE_FILE)
  END k_init_pipe

-- Public: Close the KUNIT pipe file
ROUTINE k_close_pipe
  BEGIN
    CLOSE FILE pipe_f
  END k_close_pipe

-- Public: Write to the KUNIT pipe file
--
-- This is used in conjunction with `kunit_eq_pip` to test that the
-- value of the KUNIT pipe file is equal to the provided file
ROUTINE kunit_pipe
  BEGIN
    WRITE pipe_f (s)
  END kunit_pipe

-- Public: Assert that the KUNIT pipe is equal to the provided FILE
--
-- fname - The STRING filename of the FILE to test
--
-- Examples
--
--   kunit_eq_pipe('MD:somefile.dat')
--   # => true if the KUNIT file has the same contents of
--        'MD:somefile.dat', false otherwise
ROUTINE kunit_eq_pip
  VAR
    e      : STRING[64]
    a      : STRING[64]
    i      : INTEGER
    k      : INTEGER
    j      : INTEGER
    status : INTEGER
    b      : BOOLEAN
    r      : BOOLEAN
  BEGIN
    r = true
    OPEN FILE pipe_f ('RO', PIPE_FILE)
    OPEN FILE other_f ('RO', fname)
    BYTES_AHEAD(pipe_f, i, status)
    BYTES_AHEAD(other_f, k, status)

    WHILE (i > 0) AND (k > 0) DO
      IF i > k THEN
        j = k
      ELSE
        j = i
      ENDIF

      READ pipe_f  (e::j::0)
      READ other_f (a::j::0)
      b = kunit_eq_str(e, a)
      IF NOT(b) THEN
        r = false
      ENDIF

      BYTES_AHEAD(pipe_f, i, status)
      BYTES_AHEAD(other_f, k, status)
    ENDWHILE

    CLOSE FILE pipe_f
    CLOSE FILE other_f

    RETURN(r)
  END kunit_eq_pip

-- Private: Writes the results of the KUNIT test suite
ROUTINE kunit_output
  VAR
    i      : INTEGER
    b      : INTEGER
    status : INTEGER
    s      : STRING[254]
  BEGIN
    GET_VAR(entry, '*system*', '$fast_clock', end_time, status)
    total_time = end_time - start_time

    -- make sure we do at least 1 ITP
    IF total_time = 0 THEN
      total_time = 2
    ENDIF

    OPEN FILE prog_f ('RO', PROG_PIPE)
    BYTES_AHEAD(prog_F, b, status)
    WHILE b > 0 DO
      READ prog_f (s::b::0)
      WRITE response (s)
      BYTES_AHEAD(prog_F, b, status)
    ENDWHILE
    CLOSE FILE prog_f

    WRITE response (CR,CR)

    WRITE response ('Finished in ', r_to_s((total_time / 1000.0)), ' seconds', CR)
    WRITE response (r_to_s(test_count/(total_time/1000.0)), ' tests/sec, ')
    WRITE response (r_to_s(assrtn_count/(total_time/1000.0)), ' assertions/sec', CR, CR)

    OPEN FILE fail_f ('RO', FAIL_FILE)
    BYTES_AHEAD(fail_f, b, status)
    WHILE b > 0 DO
      READ fail_f (s::b::0)
      WRITE response (s)
      BYTES_AHEAD(fail_f, b, status)
    ENDWHILE
    CLOSE FILE fail_f

    WRITE response (i_to_s(test_count), ' tests, ')
    WRITE response (i_to_s(assrtn_count), ' assertions, ')
    WRITE response (i_to_s(fail_count), ' failures', CR)

    IF output = 'html' THEN
      WRITE response ('</pre></body></html>', CR)
    ENDIF
  END kunit_output

ROUTINE kunit_spawn
  BEGIN
    RUN_TASK(filename, 0, false, false, 0, status)
    IF status<>0 THEN
      WRITE response ('could not spawn task ', filename, CR, 'status', status)
    ELSE
      task_count = task_count + 1
    ENDIF
  END kunit_spawn

ROUTINE kunit_clean
  BEGIN
    CLOSE FILE response
    CLOSE FILE fail_f
    CLOSE FILE prog_f

    filenames = ''
    output    = ''
  END kunit_clean
